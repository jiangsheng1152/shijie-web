@page "/"

<Row>
    <DatePicker TValue="DateTime" @bind-Value="dateNow" DateRender="CustomRender" onchange="GetDate" />
    @if (!isEdit)
    {
        <Button Type="ButtonType.Primary" OnClick="() => isEdit = true" Color="Color.Green6">编辑</Button>
    }
</Row>
@if (!isEdit)
{
    <div class="pre-line" style="margin:5px">
        @content
    </div>
}
else
{
    <TextArea MinRows="5" @bind-Value="content"></TextArea>
}
<Divider />
<Row>
    今日开合跳数目：
    @if (isEdit)
    {
        <AntDesign.InputNumber @bind-Value="jumpNum"></AntDesign.InputNumber>
        <Button OnClick="SaveDaily" Type="ButtonType.Primary">保存</Button>
    }
    else
    {
        <div>@jumpNum</div>
    }
</Row>
总开合跳数目：@totalNum
@code{
    private DateTime dateNow;
    private string? content;
    bool isEdit = false;
    private Func<DateTime, DateTime, RenderFragment> CustomRender;
    List<DateTime> list;
    private long jumpNum;
    long totalNum;
    DailyEntity? daily;

    private async Task GetDate()
    {
        daily = await db.Queryable<DailyEntity>().Where(x => x.CreateDate.Date == dateNow.Date).FirstAsync();
        jumpNum = daily?.JumpNum??0;
        content = daily?.Content;
        totalNum = await db.Queryable<DailyEntity>().SumAsync(x => x.JumpNum);
        list = await db.Queryable<DailyEntity>().Select(x => x.CreateDate).ToListAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        dateNow = DateTime.Now;
        await GetDate();
        list=await db.Queryable<DailyEntity>().Select(x=>x.CreateDate).ToListAsync();
        CustomRender = (currentViewDate, today) =>
        {
            string style = "";
            if (list.Contains(currentViewDate))
            {
                style = "border: 1px solid #1890ff; border-radius: 50%";
            }
            return@<div class="ant-picker-cell-inner" style="@style">@currentViewDate.Day</div>      ;
        };
    }

    private async Task SaveDaily()
    {
        if (!string.IsNullOrWhiteSpace(content) || jumpNum != 0)
        {
            if (daily is { Id: > 0 })
            {
                daily.Content = content;
                daily.JumpNum = jumpNum;
                await db.Updateable(daily).ExecuteCommandAsync();
            }
            else
                await db.Insertable(new DailyEntity
                    {
                        Content = content,
                        CreateDate = dateNow
                    }).ExecuteCommandAsync();
        }
        await GetDate();
        isEdit = false;
    }
}