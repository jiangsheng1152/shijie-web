@page "/gong-fa"

<Table @ref="table" TItem="GongFaEntity" DataSource="GongFas" OnRow="OnRowDbClick" PageIndex="@currentPage" PageSize="@pageSize" OnPageIndexChange="OnPageChange" Total="total">
    <TitleTemplate>
        <Flex Justify="FlexJustify.End" Gap="@("10")">
            <Button Type="ButtonType.Primary" @onclick="() => StartEditAsync(default)">创建</Button>
        </Flex>
    </TitleTemplate>
    <ColumnDefinitions Context="row">
        <PropertyColumn Property="c => c.Name" Width="180"></PropertyColumn>
        <PropertyColumn Property="c => c.SourecStatus" Width="180"></PropertyColumn>
        <PropertyColumn Property="c => c.Labels">
            @foreach (var a in row?.Labels ?? [])
            {
                <Tag Color="a.LabelColor">@a.Name</Tag>
            }
        </PropertyColumn>
        <PropertyColumn Property="c => c.GongFaDescription" Width="800"></PropertyColumn>
        <ActionColumn Title="操作" Width="100">
            <Button @onclick="() => StartEditAsync(row)" Type="ButtonType.Primary" Shape="ButtonShape.Circle" Icon="@IconType.Outline.Edit" />
            <Button @onclick="() => Delete(row)" Type="ButtonType.Primary" Shape="ButtonShape.Circle" Danger Icon="@IconType.Outline.Delete" />
        </ActionColumn>
    </ColumnDefinitions>
</Table>
<Modal Visible="@isShow" Footer="null" Width="800" OnCancel="() => isShow = false">
    <GongFaForm GongFa="GongFa"></GongFaForm>
</Modal>
@code {
    ITable? table;
    List<GongFaEntity> GongFas = new();
    int currentPage = 1;
    int pageSize = 10;
    int total = 0;
    GongFaEntity GongFa = new();
    bool isShow = false;

    /// <summary>
    /// 初始化
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await GetPageList();
    }

    private async Task GetPageList()
    {
        GongFas = db.Queryable<GongFaEntity>().Includes(x => x.Labels)
            .Includes(x=>x.FirstPill)
            .Includes(x=>x.SecondPill)
            .Includes(x=>x.ThirdPill)
            .ToPageList(currentPage, pageSize, ref total);
    }

    /// <summary>
    /// 页面改变
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    private async Task OnPageChange(PaginationEventArgs args)
    {
        currentPage = args.Page;
        pageSize = args.PageSize;
        await GetPageList();
    }

    Dictionary<string, object> OnRowDbClick(RowData<GongFaEntity> row) => new()
    {
        ["ondblclick"] = () =>
        {
            GongFa = row.Data;
            isShow = true;
            StateHasChanged();
        }
    };

    /// <summary>
    /// 开始编辑
    /// </summary>
    /// <param name="row"></param>
    /// <returns></returns>
    private async Task StartEditAsync(GongFaEntity row)
    {
        var data = row == null ? new() : row;
        ModalRef<bool> modalRef = default;
        IForm form = default;
        modalRef = ModalService.CreateModal<bool>(new()
        {
            Title = data.Id > 0 ? "编辑" : "新建",
            Content = @<Form @ref="form" Model="data" OnFinish="() => modalRef.OkAsync(true)" LabelColSpan="5" WrapperColSpan="19">
                <FormItem>
                    <Input @bind-Value="@context.Name"/>
                </FormItem>
                <FormItem>
                    <EnumSelect TEnum="RootSourceStatus" @bind-Value="@context.SourecStatus"/>
                </FormItem>
                <FormItem>
                    <TextArea MinRows="3" @bind-Value="@context.GongFaDescription" />
                </FormItem>
            </Form>,

            OnOk = async (e) =>
            {
                if (!form.Validate())
                    return;

                var GongFa = await db.Queryable<GongFaEntity>().Where(x => x.Name == data.Name).FirstAsync();
                if (GongFa != null && row?.Id == 0)
                {
                    await message.ErrorAsync("名字重复");
                }

                // save db and refresh
                modalRef.SetConfirmLoading(true);


                if (data.Id > 0)
                {
                    //修改
                    await db.Updateable<GongFaEntity>(data).ExecuteCommandAsync();
                }
                else
                {
                    //新增
                    await db.Insertable<GongFaEntity>(data).ExecuteCommandAsync();
                }

                await modalRef.CloseAsync();
                await GetPageList();
                table.ReloadData();
                StateHasChanged();
            },
            OnCancel = async (e) =>
            {
                await modalRef.CloseAsync();
            }
        });
    }

    private async Task Delete(GongFaEntity row)
    {
        if (!(await ComfirmService.Show("确认删这条数据吗?", "删除", ConfirmButtons.YesNo, ConfirmIcon.Warning) == ConfirmResult.Yes))
            return;
        await db.Deleteable<GongFaEntity>().Where(x => x.Id == row.Id).ExecuteCommandAsync();
        await GetPageList();
        table.ReloadData();
        StateHasChanged();
    }
}

