@page "/skill"
<Table @ref="table" TItem="SkillEntity" DataSource="Skills" PageIndex="@currentPage" PageSize="@pageSize" OnPageIndexChange="OnPageChange" Total="total">
    <TitleTemplate>
        <Flex Justify="FlexJustify.End" Gap="@("10")">
            <Button Type="ButtonType.Primary" @onclick="() => StartEditAsync(default)">创建</Button>
        </Flex>
    </TitleTemplate>
    <ColumnDefinitions Context="row">
        <PropertyColumn Property="c => c.Name"></PropertyColumn>
        <PropertyColumn Property="c => c.SkillStatus"></PropertyColumn>
        <PropertyColumn Property="c => c.GradeStatus"></PropertyColumn>
        <PropertyColumn Property="c => c.Description"></PropertyColumn>
        <PropertyColumn Property="c => c.Labels">
            @foreach (var a in row?.Labels ?? [])
            {
                <Tag Color="a.LabelColor">@a.Name</Tag>
            }
        </PropertyColumn>
        <ActionColumn Title="操作" Width="100">
            <Button @onclick="() => StartEditAsync(row)" Type="ButtonType.Primary" Shape="ButtonShape.Circle" Icon="@IconType.Outline.Edit" />
            <Button @onclick="() => Delete(row)" Type="ButtonType.Primary" Shape="ButtonShape.Circle" Danger Icon="@IconType.Outline.Delete" />
        </ActionColumn>
    </ColumnDefinitions>
</Table>
@* <Modal Visible="@isShow" Footer="null" Width="800" OnCancel="OnCancel">
    <SkillForm Skill="Skill"></SkillForm>
</Modal> *@
@code {
    ITable table;
    List<SkillEntity> Skills = new();
    int currentPage = 1;
    int pageSize = 10;
    int total = 0;
    // SkillEntity Skill=new();
    // bool isShow = false;

    /// <summary>
    /// 初始化
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await GetPageList();
    }

    // Dictionary<string, object> OnRowDbClick(RowData<SkillEntity> row) => new()
    // {
    //     ["ondblclick"] = () =>
    //     {
    //         Skill = row.Data;
    //         isShow = true;
    //         StateHasChanged();
    //     }
    // };

    // public async Task OnCancel()
    // {
    //     isShow = false;
    //     await GetPageList();
    // }

    private async Task GetPageList()
    {
        Skills = db.Queryable<SkillEntity>().Includes(x=>x.Labels).ToPageList(currentPage, pageSize,ref total);
    }

    /// <summary>
    /// 页面改变
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    private async Task OnPageChange(PaginationEventArgs args)
    {
        currentPage = args.Page;
        pageSize = args.PageSize;
        await GetPageList();
    }

    /// <summary>
    /// 开始编辑
    /// </summary>
    /// <param name="row"></param>
    /// <returns></returns>
    private async Task StartEditAsync(SkillEntity row)
    {
        var data = row == null ? new() : row;
        ModalRef<bool> modalRef = default;
        IForm form = default;
        modalRef = ModalService.CreateModal<bool>(new()
        {
            Title = data.Id > 0 ? "编辑" : "新建",
            Content = @<Form @ref="form" Model="data" OnFinish="() => modalRef.OkAsync(true)" LabelColSpan="5" WrapperColSpan="19">
                <FormItem>
                    <Input @bind-Value="@context.Name"/>
                </FormItem>
                <FormItem>
                    <EnumSelect TEnum="SkillStatus" @bind-Value="@context.SkillStatus"/>
                </FormItem>
                <div>
                    @if (context.SkillStatus is SkillStatus.单体系技能 or SkillStatus.多体系技能)
                    {
                        <FormItem>
                            <EnumSelect TEnum="GradeStatus?" @bind-Value="@context.GradeStatus"/>
                        </FormItem>
                    }
                </div>
                <FormItem>
                    <TextArea MinRows="3" @bind-Value="@context.Description"></TextArea>
                </FormItem>
            </Form>,

            OnOk = async (e) =>
            {
                if (!form.Validate())
                    return;

                var Skill = await db.Queryable<SkillEntity>().Where(x => x.Name == data.Name).FirstAsync();
                if (Skill != null && row.Id == 0)
                {
                    await message.ErrorAsync("名字重复");
                }

                // save db and refresh
                modalRef.SetConfirmLoading(true);


                if (data.Id > 0)
                {
                    //修改
                    await db.Updateable(data).ExecuteCommandAsync();
                }
                else
                {
                    //新增
                    await db.Insertable(data).ExecuteCommandAsync();
                }

                await modalRef.CloseAsync();
                await GetPageList();
                table.ReloadData();
                StateHasChanged();
            },

            OnCancel = async (e) =>
            {
                await modalRef.CloseAsync();
            }
        });
    }

    private async Task Delete(SkillEntity row)
    {
        if (!(await ComfirmService.Show("确认删这条数据吗?", "删除", ConfirmButtons.YesNo, ConfirmIcon.Warning) == ConfirmResult.Yes))
            return;

        await db.Deleteable<SkillEntity>().Where(x => x.Id == row.Id).ExecuteCommandAsync();
        await GetPageList();
        table.ReloadData();
        StateHasChanged();
    }
}

